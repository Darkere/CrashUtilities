buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'java'
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

version = '4.0'
group = 'com.darkere.crashutilities' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'crashutilities'

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.18.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}
repositories {
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    repositories {
        mavenCentral()
    }
    maven {
        url = "https://mvnrepository.com/artifact/"
    }
    flatDir {
        dirs 'build'
    }
}

//shadowJar {
//    configurations = [project.configurations.implementation]
//}
dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.9'


//    implementation('fr.minuskube:jpastee:1.0.2') { transitive = false }
//    implementation('com.mashape.unirest:unirest-java:1.4.9'){ transitive = false }
//    implementation group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.4'
//    implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.12'
//    implementation group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.13'
//    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'
//    implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.13'
//    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
//    implementation group: 'org.json', name: 'json', version: '20190722'
       runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.1-5.0.4.2")
       compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.18.1-5.0.4.2:api")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "crashutilities",
                "Specification-Vendor"    : "crashutilities",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
reobf {
//    shadowJar {
//
//    }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
//shadowJar {
//    from sourceSets.main.output
//
//    dependencies {
//        include(dependency('fr.minuskube:jpastee:1.0.2'))
//        include(dependency('com.mashape.unirest:unirest-java:1.4.9'))
//        include(dependency(group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.4'))
//        include(dependency(group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.12'))
//        include(dependency(group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.13'))
//        include(dependency(group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.13'))
//        include(dependency(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'))
//        include(dependency(group: 'org.json', name: 'json', version: '20190722'))
//        include(dependency(group: 'commons-logging', name: 'commons-logging', version: '1.2'))
//    }
//    relocate 'org.apache.http', 'dark.org.http'
//    relocate 'org.apache.commons.logging', 'dark.org.commons.logging'
//    relocate 'org.json', 'dark.org.json'
//}