plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
    id 'net.darkhax.curseforgegradle' version '1.1.18'
}
version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
    // The mappings can be changed at any time and must be in the following format.


//    // Default run configurations.
//    // These can be tweaked, removed, or duplicated as needed.
//    runs {
//        // applies to all the run configs below
//        configureEach {
//            workingDirectory project.file('run')
//
//            // Recommended logging data for a userdev environment
//            // The markers can be added/remove as needed separated by commas.
//            // "SCAN": For mods scan.
//            // "REGISTRIES": For firing of registry events.
//            // "REGISTRYDUMP": For getting the contents of all registries.
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            // Recommended logging level for the console
//            // You can set various levels here.
//            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
//            property 'forge.logging.console.level', 'debug'
//
//            mods {
//                "${mod_id}" {
//                    source sourceSets.main
//                }
//            }
//        }
//
//        client {
//            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
//            property 'forge.enabledGameTestNamespaces', mod_id
//            property 'mixin.env.remapRefMap', 'true'
//            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
//        }
//
//        server {
//            property 'forge.enabledGameTestNamespaces', mod_id
//            property 'mixin.env.remapRefMap', 'true'
//            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
//            args '--nogui'
//        }
//
//        // This run config launches GameTestServer and runs all registered gametests, then exits.
//        // By default, the server will crash when no gametests are provided.
//        // The gametest system is also enabled by default for other run configs under the /test command.
//        gameTestServer {
//            property 'forge.enabledGameTestNamespaces', mod_id
//        }
//
//        data {
//            // example of overriding the workingDirectory set in configureEach above
//            workingDirectory project.file('run-data')
//
//            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
//            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
//        }
//    }
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    repositories {
        mavenCentral()
    }
    maven {
        url = "https://mvnrepository.com/artifact/"
    }
    flatDir {
        dirs 'build'
    }
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    implementation "net.neoforged:neoforge:${neo_version}"

    runtimeOnly ("top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}")
    compileOnly ("top.theillusivec4.curios:curios-neoforge:${curios_version}+${minecraft_version}:api")
    implementation ("mcjty.theoneprobe:theoneprobe:${top_version}"){ transitive = false}
}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = System.getenv('curseforge_token')
    def mainFile = upload(371813, jar)
    mainFile.releaseType = "release"
    mainFile.changelog = '- port to 1.20.4'
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "1000"
        }
    }
}